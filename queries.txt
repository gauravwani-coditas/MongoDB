//Write a query to retrieve all employees who are above 30 years old from the employees collection.
db.employees.find({age : {$gt : 30}})

//update
db.employees.updateOne({_id : ObjectId('65d6edbeed6550b2c80f8cd2') },{$set : {position : "Senior Software Engineer"}})

//delete
db.projects.deleteOne({_id : ObjectId('65d7033ced6550b2c80f8ce6')})

//Aggregate query :
//1
db.employees.aggregate([
    {
      $lookup: {
        from: "financial_details",
        let: {
          employee_id: {
            $toString: "$_id",
          },
        },
        pipeline: [
          {
            $match: {
              $expr: {
                $eq: [
                  "$$employee_id",
                  "$employee_id",
                ],
              },
            },
          },
        ],
        as: "employee",
      },
    },
    {
      $unwind: "$employee",
    },
    {
      $group: {
        _id: "$position",
        average_salary: {
          $avg: "$employee.salary",
        },
      },
    },
]);

//2.
db.employees.aggregate([
    {
      $lookup: {
        from: "financial_details",
        let: { employee_id: { $toString: "$_id" } },
        pipeline: [
          {
            $match: {
              $expr: { $eq: ["$$employee_id", "$employee_id"] }
            }
          }
        ],
        as: "employee"
      }
    },
    {
      $unwind: "$employee"
    },
    {
      $group : {
        _id : "$age",
        numberOfEmployees  : {$sum : 1}
      }
    }
]);

  //3.
//Sorting:
//Sort the projects based on their status in descending order from the projects collection.
db.projects.find().sort({status : -1});

//4. 
[

    {
      $lookup: {
        from: "financial_details",
        let: { employee_id: { $toString: "$_id" } },
        pipeline: [
          {
            $match: {
              $expr: { $eq: ["$$employee_id", "$employee_id"] }
            }
          }
        ],
        as: "financial_details"
      }
    },
  	{
    	$unwind: "$financial_details"
  	},
  
  {
    $match: {
      "financial_details.annual_income": { $gt: 700000}
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      position: 1
    }
  }
  
]


//Advanced Aggregation
db.employees.aggregate([
    {
      $lookup: {
        from: "projects",
        let: { employee_id: { $toString: "$_id" } },
        pipeline: [
          {
            $match: {
              $expr: { $eq: ["$$employee_id", "$employee_id"] }
            }
          }
        ],
        as: "projects"
      }
    },
    {
      $group: {
        _id: "$position",
        employees: { $push: "$$ROOT" }, // Preserve employee details for further processing
        totalProjects: { $sum: { $size: "$projects" } },
        projectNames: { $first: "$projects.project_name" }
      }
    },
    {
      $lookup: {
        from: "financial_details",
        pipeline: [
          {
            $group: {
              _id: null,
              totalIncome: { $sum: "$annual_income" },
              highExpensesDetails: {
                $push: {
                  $cond: [
                    { $gt: ["$expenses", 10000] },
                    { employee_id: "$employee_id", expenses: "$expenses" },
                    "$$REMOVE"
                  ]
                }
              }
            }
          }
        ],
        as: "financialSummary"
      }
    },
    {
      $project: {
        _id: 0,
        position: "$_id",
        totalProjects: 1,
        projectNames: 1,
        totalIncome: { $arrayElemAt: ["$financialSummary.totalIncome", 0] },
        highExpensesDetails: { $arrayElemAt: ["$financialSummary.highExpensesDetails", 0] }
      }
    }
]);
